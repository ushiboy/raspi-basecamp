#!/bin/bash

SRC_IMAGE=$1
FILE_NAME=`basename $SRC_IMAGE`
DST_IMAGE="custom-$FILE_NAME"

CUSTOM_IMAGE_SIZE="4GiB"
ROOT_SIZE="+3G"
ROOT_PART_NUM=2

check_privilege()
{
    if [ "`whoami`" != "root" ]; then
        echo "Require root privilege"
        exit 1
    fi
}

resize_image()
{
    truncate -s $1 $2
}

resize_rootfs_partition()
{
    ROOT_START=`fdisk -l $1 | grep img2 | awk '{print $2}'`

    fdisk $1 <<EOF
d
$2
n
p
$2
$ROOT_START
$3
w
EOF
}

create_extra_partition()
{
    ROOT_END=`fdisk -l $1 | grep img2 | awk '{print $3}'`
    EXTRA_START=`expr $ROOT_END + 1`


    fdisk $1 <<EOF
n
p
$2
$EXTRA_START

w
EOF
}

wait_loop_device_ready()
{
    while :
    do
        if [ -e $1 ]; then
            break
        fi
    done
}

initialize_extrafs()
{
    mkfs -t ext4 $1
    e2label $1 extrafs
}

disable_init_resize()
{
    mkdir -p boot
    mount $1 boot
    sed -i "s/init=\/usr\/lib\/raspi-config\/init_resize.sh//g" boot/cmdline.txt
    umount boot
    rm -rf boot
}

enable_mount_extrafs()
{
    mkdir -p rootfs
    mount $1 rootfs
    echo "/dev/mmcblk0p3  /extra      ext4    defaults,noatime  0       1" >> rootfs/etc/fstab
    mkdir rootfs/extra
    umount rootfs
    rm -rf rootfs
}

check_privilege

cp $SRC_IMAGE $DST_IMAGE
resize_image $CUSTOM_IMAGE_SIZE $DST_IMAGE

resize_rootfs_partition $DST_IMAGE $ROOT_PART_NUM $ROOT_SIZE

EXTRA_PART_NUM=`expr $ROOT_PART_NUM + 1`
create_extra_partition $DST_IMAGE $EXTRA_PART_NUM

LOOP_DEV=(`kpartx -av $DST_IMAGE | awk '{print $3}'`)
BASE="/dev/mapper"
BOOT_DEV="$BASE/${LOOP_DEV[0]}"
ROOT_DEV="$BASE/${LOOP_DEV[1]}"
EXTRA_DEV="$BASE/${LOOP_DEV[2]}"

wait_loop_device_ready $BOOT_DEV
wait_loop_device_ready $ROOT_DEV
wait_loop_device_ready $EXTRA_DEV

initialize_extrafs $EXTRA_DEV
disable_init_resize $BOOT_DEV
enable_mount_extrafs $ROOT_DEV

kpartx -d $DST_IMAGE
